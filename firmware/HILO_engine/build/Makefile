#-------------------------------------------------------------------------------------------------------------------------------
#                                                     _   _ ___ _     ___  
#                                                    | | | |_ _| |   / _ \ 
#                                                    | |_| || || |  | | | |
#                                                    |  _  || || |__| |_| |
#                                                    |_| |_|___|_____\___/ 
#                                                     Hardware in the loop
# File name: Makefile
#
# Author: Silvano Catinella <catinella@yahoo.com>
#
# Description:
#	This file contains all rules you need to build the firmware for many different targets.
#	In order to build the firmware, you need to install the following software: arm-none-eabi-gcc, openocd o st-flash
#	You can obtain them installing STM CubeIDE and CubeMX applications. You can free download them from the ST
#	Microelectronic website (https://www.st.com/content/st_com/en.html)
#	
#	This building process is based on some configuration values. You can set them as make-executable-file's arguments or
#	using the conf.mk configuration file
#
#	Configurable symbols:
#		GDB=1                 It enables debug support
#		OCD_PROGRAMMER=1      It uses the open-OCD programmer instead the ST one
#		PART=<STM-part-name>  Eg. STM32F031x6
#
#	Platform dependent file
#	=======================
#	In order to build the firmware for different targets, Makefile need a file for every ARM achitecture type (M0, M0+,
#	M3, M4....). In the file there are all architecture dependent information used to compile firmware correctly. So,
#	before to try to run make for a different target, please, check for the architecture file in ./mcu folder.
#
#	Also the linker-script is a platform depemdent file and it is generated by CubeMX. But, unfortunately, to automatize
#	all process I have been forced to use a different name for this file, a  more generic one: <part-name>_FLASH.ld.
#	So, after you have generated it, don't forget to change its name
#
#	At the moment, as default the partnumebr is STM32F031x6. Because for test I used a NUCLEO-F031K6 development board
#
#-------------------------------------------------------------------------------------------------------------------------------
# library loading...
include lib.mk


#
# Configuration loading...
#
-include conf.mk

# Defaults
GDB              ?= 0
OCD_PROGRAMMER   ?= 0

# Check for the configuration
ifndef GNUTOOLS_PATH
$(error GNUTOOLS_PATH is not defined into the conf.mk file!)
endif


#
# MCU's data loading...
#
PART     ?= STM32F031x6
MCU_TYPE := $(call _getArch, $(PART))
ifeq ($(PART), )
$(error $(PART) has not a previousely defined STM chips family!)
else
$(info Platform dependent data loading for $(MCU_TYPE) architecture)
include mcu/$(MCU_TYPE).mk
endif


#
# Executable files
#
TOOLCHAIN_PREFIX := $(GNUTOOLS_PATH)/arm-none-eabi
CC               := $(TOOLCHAIN_PREFIX)-gcc
AS               := $(TOOLCHAIN_PREFIX)-gcc
AR               := $(TOOLCHAIN_PREFIX)-ar
LD               := $(TOOLCHAIN_PREFIX)-ld
OBJCOPY          := $(TOOLCHAIN_PREFIX)-objcopy
SIZE             := $(TOOLCHAIN_PREFIX)-size


#
# Source code
#
SRC_DIRS := \
  ../Core/Src \
  ../Drivers/STM32$(MCU_TYPE)xx_HAL_Driver/Src

STARTUP  := ../Core/Startup/startup_$(call _lc,$(PART)).s
SYSTEM   := ../Core/Src/system_stm32$(call _lc,$(MCU_FAMILY)).c
LDSCRIPT := $(abspath ../$(call _uc,$(PART))_FLASH.ld)


INCLUDES := \
  -I../Core/Inc \
  -I../Drivers/CMSIS/Include \
  -I../Drivers/CMSIS/Device/ST/$(MCU_FAMILY)/Include \
  -I../Drivers/$(MCU_FAMILY)_HAL_Driver/Inc


DEFS := \
	-DUSE_HAL_DRIVER \
	-D$(MCU_FAMILY) \
	-D$(PART)


MCUFLAGS := $(CPU) -mthumb $(FPU) $(FLOAT_ABI)
TARGET   := firmware_$(PART)
CSTD     := -std=c11
OPT      := -O2
WARN     := -Wall -Wextra -Wshadow -Wlogical-op -Wpointer-arith -Wstrict-prototypes
CFLAGS   := $(CSTD) $(OPT) $(WARN) $(DEFS) $(INCLUDES) $(MCUFLAGS) -ffunction-sections -fdata-sections -fno-common
ASFLAGS  := $(MCUFLAGS) -x assembler-with-cpp
LDFLAGS  := $(MCUFLAGS) -Wl,--gc-sections -Wl,-Map,$(TARGET).map -T$(LDSCRIPT)


DRVR_SRCS := $(shell find ../Drivers -name '*.c' -not -path '*/Templates/*')
CORE_SRCS := $(shell find ../Core/Src -name '*.c')
ASMS := $(STARTUP)

TSRCS := $(patsubst ../%,%,$(DRVR_SRCS)) $(patsubst ../%,%,$(CORE_SRCS))
TASMS := $(patsubst ../%,%,$(ASMS))

COBJS := $(TSRCS:.c=.o)
DOBJS := $(TSRCS:.c=.d)
AOBJS := $(TASMS:.s=.o)
DEPS  := $(TCOBJS:.o=.d)

VPATH := ..

.PHONY: all clean flash size debug

#-------------------------------------------------------------------------------------------------------------------------------
#                               C O M P I L I N G   A N D   B U I L D I N G   R U L E S
#-------------------------------------------------------------------------------------------------------------------------------

all:			$(TARGET).elf $(TARGET).bin $(TARGET).hex size

%.o:			%.c
			@echo "[CC] $@"
			@mkdir -p $(dir $@)
			@$(CC) $(CFLAGS) -MMD -MP -c $< -o $@

%.o:			%.s
			@echo "[ASM] $@"
			@mkdir -p $(dir $@)
			@$(AS) $(ASFLAGS) -c $< -o $@

ifeq ($(GDB), 0)
$(TARGET).elf:	$(COBJS) $(AOBJS)
			@echo "[LD] $@"
			@$(CC) $^ $(LDFLAGS) -o $@
else
$(TARGET).elf:	$(COBJS) $(AOBJS)
			@echo "[LD+GDB] $@"
			$(TOOLCHAIN_PREFIX)-gdb $^
endif

$(TARGET).bin:	$(TARGET).elf
			@echo "[CONV] $@"
			@$(OBJCOPY) -O binary $< $@

$(TARGET).hex:	$(TARGET).elf
			@echo "[CONV] $@"
			@$(OBJCOPY) -O ihex $< $@

size:			$(TARGET).elf
			@echo "[INFO] $@"
			@$(SIZE) --format=berkeley $<

cleanall:		clean
			@for ext in elf bin hex map; do \
				rm -fv $(TARGET).$$ext;   \
			done
			@for dir in $$(find . -type d -printf '%P\n' 2>/dev/null); do \
				if [ "$$dir" != "mcu" ]; then  rmdir -pv $$dir 2>/dev/null; fi; \
			done

clean:
			@rm -fv $(COBJS) $(DOBJS) $(AOBJS)

ifeq ($(OCD_PROGRAMMER), 1)
flash:		$(TARGET).elf
			openocd -f interface/stlink.cfg -f target/stm32f0x.cfg -c "program $< verify reset exit"
else
flash:		$(TARGET).bin
			st-flash write $< 0x08000000
endif

debug:
			@echo "------------ C objects ------------"
			@for file in "$(COBJS)"; do echo "$$file"; done
			@echo "-------- Assembly objects ---------"
			@for file in "$(AOBJS)"; do echo "$$file"; done
			@echo "-------- Internal variables ---------"
			@echo "STARTUP=$(STARTUP)"
			@echo "SYSTEM=$(SYSTEM)"
			@echo "LDSCRIPT=$(LDSCRIPT)"

#
# Self generating compiling rules inclusion
#
-include $(DEPS)

